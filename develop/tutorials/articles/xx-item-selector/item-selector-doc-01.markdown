# Selecting entities using the Item Selector


This tutorial demonstrates how to:

- select elements from the portal using the Item Selector.

We will explain the steps to select elements from the portal using the
Item Selector.

First of all, you need to know what kind of element you want to select.

thing that we need to ask ourselves is what kind of element
do we want to select? Do we want to select a user? Do we want to select
an image? or a video? The answer to this question must be represented by
a class that implements `ItemSelectorCriterion`. The item selector
criterion contains the necessary information to indicate to the Item
Selector what kind of elements we would like to select.

The second question that we will ask ourselves is what information do we
expect to receive when the user selects a particular element? Do we
expect a URL? Do we expect a Universally Unique Identifier (UUID)? or
just a primary key? This information must be represented by a class that
implements `ItemSelectorReturnType`. The item selector return type
indicates the item selector what information should be returned when the
element is selected.

The item selector return types need to be set to the item selector
criterion using the setter `setDesiredItemSelectorReturnTypes`.

This information is enough to use the item selector to select elements.
For the sake of example let’s imagine that we want to select images and
we expect the item selector to return the URL of the selected image.
Then, we can use the following classes (both of them in module
`item-selector-criteria-api`):

`com.liferay.item.selector.criteria.image.criterion.ImageItemSelectorCriterion`

`com.liferay.item.selector.criteria.URLItemSelectorReturnType`

The Item Selector uses this information to automatically decide which
selection views should be displayed based on the criteria and the return
types. If we use `ImageItemSelectorCriterion` it will display the views
that allows image selection, while if we use `VideoItemSelectorCriterion`
it will display the views that allows video selection.

There are several item selector criteria provided by the item selector
api module. The following criteria is included by the item selector api
module:

-   ImageItemSelectorCriterion
-   AudioItemSelectorCriterion
-   FileItemSelectorCriterion
-   UploadItemSelectorCriterion
-   URLItemSelectorCriterion
-   VideoItemSelectorCriterion

However, other applications can create their own criteria and additional
applications can use the criteria to select new type of entities.

In order to use the Item Selector we need to obtain a URL to invoke it.
This URL is generated by the Item Selector OSGi Component that can be
easily obtained using Declarative Services as follows:

    import com.liferay.item.selector.ItemSelector;

    @Reference(unbind = "-")

    public void setItemSelector(ItemSelector itemSelector) {

      _itemSelector = itemSelector;

    }

    private ItemSelector _itemSelector;

The URL to the item selector will be obtained by invoking the method
`getItemSelectorURL` with the following parameters:

1.  RequestBackedPortletURLFactory: factory to create portlet urls. It
    can be easily created by invoking with either HttpServletRequest or
    PortletRequest\
    RequestBackedPortletURLFactoryUtil.create(request)
2.  ItemSelectedEventName: a unique javascript event name that will be
    triggered by the item selector when the element is selected.
3.  ItemSelectorCriterion: the criterion (or array of criteria) that
    specifies the element that should be selected.

In the following example we are obtaining the item selector url for the
ImageItemSelectorCriterion.

List\<ItemSelectorReturnType\> desiredItemSelectorReturnTypes =  new
ArrayList\<\>();

desiredItemSelectorReturnTypes.add(new URLItemSelectorReturnType());

ImageItemSelectorCriterion imageItemSelectorCriterion =   new
ImageItemSelectorCriterion();

imageItemSelectorCriterion.setDesiredItemSelectorReturnTypes(desiredItemSelectorReturnTypes);

PortletURL itemSelectorURL = \_itemSelector.getItemSelectorURL(

  requestBackedPortletURLFactory, "ampleTestSelectItem",

  imageItemSelectorCriterion);

The order of the item selector criteria is important because it decides
the order of the selections views. If we pass the item selector criteria
in this order: ImageItemSelectorCriterion, VideoItemSelectorCriterion it
will display first the selection views for images and then for videos,
but if we reverse the item selector criteria it will display first the
video selection view and then the image selection view.

Same happens with the return types. The order determines the priority
and the selection view will use the first return type that it can
return.

The Item Selector URL is used by the Liferay Item Selector Dialog
javascript component. This javascript component will open the dialog
with the item selector and it will listen to the javascript event name
that we used to generate the url to obtain the information about the
selected element.

The information provided by the item selector will depend on the Item
Selector Return Type used. To see the detail information provided by
each of the Item Selector Return Type you should refer to the javadoc.

For the sake of example let’s imagine that we want to open the item
selector to select images when clicking a “Choose” button. The logic
should be as follows:

\<aui:button name="chooseImage" value="choose" /\>

\<!-- --\>

\<aui:script use="liferay-item-selector-dialog"\>

\$('\#\<portlet:namespace /\>chooseImage').on(

  'click',

  function(event) {

     var itemSelectorDialog = new A.LiferayItemSelectorDialog(

        {

           eventName: 'sampleTestSelectItem',

           on: {

              selectedItemChange: function(event) {

                 var selectedItem = event.newVal;

var itemValue = JSON.parse(selectedItem.value);

itemSrc =  itemValue.url;

[use itemSrc as needed]

                 }

              }

           },

           title: '\<liferay-ui:message key="select-image" /\>',

           url: '\<%= itemSelectorURL.toString() %\>'

        }

     );

     itemSelectorDialog.open();

  }

);

\</aui:script\>

When the user clicks the Choose button, a new dialog will pop up
rendering the Item Selector. This item selector will render the views
that meet the ImageItemSelectorCriterion. This means, all the views that
allows the user to select images and they return a url when the image is
selected.

But this is just the beginning. Item Selector is very extensible and you
can contribute new views to select existing entities or even completely
new entities. We will see how to do this in upcoming tutorials.

[[a]](#cmnt_ref1)Tracking via
https://issues.liferay.com/browse/LRDOCS-2427
